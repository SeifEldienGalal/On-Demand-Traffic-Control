
On-Demand-trafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800068  00800068  00000c8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a2  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fd  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000033e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  8a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
void App_init(){
	
	
	
	// calling the Timer_0 function
	TIMER_0_init();
  92:	0e 94 af 02 	call	0x55e	; 0x55e <TIMER_0_init>
	// setting the Timer_0 overflow interrupt
	INTERRUPT_T0_ovf_init();
  96:	0e 94 9a 02 	call	0x534	; 0x534 <INTERRUPT_T0_ovf_init>
	
	// Enabling the INT_0 interrupt
	INTERRUPT_0_init();
  9a:	0e 94 9e 02 	call	0x53c	; 0x53c <INTERRUPT_0_init>
	
	// the global interrupt is called here
	INTERRUPT_global_init();
  9e:	0e 94 96 02 	call	0x52c	; 0x52c <INTERRUPT_global_init>
	setcallback(LED_toggle);
  a2:	8a e5       	ldi	r24, 0x5A	; 90
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	0e 94 a8 02 	call	0x550	; 0x550 <setcallback>
	
	BUTTON_init(PORT_D, 2);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	84 e4       	ldi	r24, 0x44	; 68
  ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BUTTON_init>
	
	
	// calling all the led pins as output because they are  output devices only.
	LED_init(traffic_lights, green_light);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(traffic_lights, yellow_light);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(traffic_lights, red_light);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(pedestrian_lights, green_light);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	82 e4       	ldi	r24, 0x42	; 66
  ce:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(pedestrian_lights, yellow_light);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	82 e4       	ldi	r24, 0x42	; 66
  d6:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(pedestrian_lights, red_light);
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
  e2:	08 95       	ret

000000e4 <App_start>:

void App_start(){
	
	//*Level1*//
	
	if(count_level == level1){
  e4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
  e8:	81 11       	cpse	r24, r1
  ea:	18 c0       	rjmp	.+48     	; 0x11c <App_start+0x38>
		// first start of the normal mode loop
		LED_on(traffic_lights, green_light);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		LED_on(pedestrian_lights, yellow_light);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		
		// here this  function starts a 5 sec delay when the leds are turned on to prevent traffic confusion
		TIMER_0_delay();
  fc:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER_0_delay>
	
		// here the count variable is added by one to switch to the next level, then modulus 4 to make the range of values from (0-3) 
		count_level = (count_level+1)%4;
 100:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	83 70       	andi	r24, 0x03	; 3
 10a:	90 78       	andi	r25, 0x80	; 128
 10c:	99 23       	and	r25, r25
 10e:	24 f4       	brge	.+8      	; 0x118 <App_start+0x34>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	8c 6f       	ori	r24, 0xFC	; 252
 114:	9f 6f       	ori	r25, 0xFF	; 255
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count_level>
	
	
	
	
	//*Level2*//
	if(count_level == level2){
 11c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	c1 f4       	brne	.+48     	; 0x154 <App_start+0x70>
		/*	in the level2 here the timer_0 overflow interrupt blinks the traffic lights --> yellow light in normal mode
			and both cars and pedestrian light--> yellow light in pedestrian mode. */
		TIMER_0_delay();
 124:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER_0_delay>
		
		// turning  the two yellow leds off to make the toggling end with an off state for the leds after the  blinking is done.
		LED_off(traffic_lights, yellow_light);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		LED_off(pedestrian_lights, yellow_light);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		
		count_level = (count_level+1)%4;
 138:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	83 70       	andi	r24, 0x03	; 3
 142:	90 78       	andi	r25, 0x80	; 128
 144:	99 23       	and	r25, r25
 146:	24 f4       	brge	.+8      	; 0x150 <App_start+0x6c>
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	8c 6f       	ori	r24, 0xFC	; 252
 14c:	9f 6f       	ori	r25, 0xFF	; 255
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count_level>
	
	
	
	
	//*Level3*//
	if(count_level == level3){
 154:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	21 f5       	brne	.+72     	; 0x1a4 <App_start+0xc0>
		// the Program  enters this if statement only when  in pedestrian mode .
		if(startpress){
 15c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 160:	88 23       	and	r24, r24
 162:	41 f0       	breq	.+16     	; 0x174 <App_start+0x90>
			LED_on(pedestrian_lights, green_light);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
			LED_off(pedestrian_lights, red_light);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		}
		
		//  turning on red traffic light and turning off green traffic light.
		LED_off(traffic_lights, green_light);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		LED_on(traffic_lights, red_light);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		
		TIMER_0_delay();
 184:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER_0_delay>
		
		count_level = (count_level+1)%4;
 188:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	83 70       	andi	r24, 0x03	; 3
 192:	90 78       	andi	r25, 0x80	; 128
 194:	99 23       	and	r25, r25
 196:	24 f4       	brge	.+8      	; 0x1a0 <App_start+0xbc>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	8c 6f       	ori	r24, 0xFC	; 252
 19c:	9f 6f       	ori	r25, 0xFF	; 255
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count_level>
	
	//*Level4*//
	
	/*	here in level4 , the timer_0 overflow makes the yellow traffic light blink in normal mode
		and both traffic and pedestrian yellow light in pedestrian mode. */
	TIMER_0_delay();
 1a4:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER_0_delay>
	
	// Turned off the pedestrian green light in the case of pedestrian mode to exit and enter normal mode(traffic) level1 again.
	LED_off(pedestrian_lights, green_light);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e4       	ldi	r24, 0x42	; 66
 1ac:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
	// Turned off the traffic blinking yellow light in the case of normal mode to start again from Level1.
	LED_off(traffic_lights, yellow_light);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
	// Turned off the pedestrian yellow light in case of pedestrian mode to exit and enter normal mode phase_1 again.
	LED_off(pedestrian_lights, yellow_light);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
	
	if(count_level == level4){
 1c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count_level>
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 f4       	brne	.+36     	; 0x1ec <App_start+0x108>
		count_level = (count_level+1)%4;
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	83 70       	andi	r24, 0x03	; 3
 1ce:	90 78       	andi	r25, 0x80	; 128
 1d0:	99 23       	and	r25, r25
 1d2:	24 f4       	brge	.+8      	; 0x1dc <App_start+0xf8>
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	8c 6f       	ori	r24, 0xFC	; 252
 1d8:	9f 6f       	ori	r25, 0xFF	; 255
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count_level>
		
		// Turning off cars blinking red light in case of normal mode to start again from phase_1.
		LED_off(traffic_lights, red_light);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e4       	ldi	r24, 0x41	; 65
 1e4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		
		// Setting first_click flag to zero to indicate returning to normal mode.
		startpress=0;
 1e8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 1ec:	08 95       	ret

000001ee <BUTTON_init>:
}

//button  value  low(0) high(1) and calling the DIO function right away instead of creating a whole new function 
void BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t *value)
{
	DIO_read(buttonPort,buttonPin,value);
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_init>
 1f4:	08 95       	ret

000001f6 <__vector_1>:
}



ISR(EXT_INT_0){
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	
	

	
	if(!initialpress){
 218:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <initialpress>
 21c:	81 11       	cpse	r24, r1
 21e:	2d c0       	rjmp	.+90     	; 0x27a <__vector_1+0x84>
		
		// if pressed in level1 it jumps over the green light remaining wait time and turns on the traffic blinking yellow light
		if(counter == level1){
 220:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter>
 224:	81 11       	cpse	r24, r1
 226:	04 c0       	rjmp	.+8      	; 0x230 <__vector_1+0x3a>
			ovf=20;
 228:	84 e1       	ldi	r24, 0x14	; 20
 22a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ovf>
 22e:	22 c0       	rjmp	.+68     	; 0x274 <__vector_1+0x7e>
		}
		
		// if pressed in level2 it resets the traffic lights blinking yellow light remaining wait time .
		else if(counter == level2){
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <__vector_1+0x54>
			
			LED_off(traffic_lights, yellow_light);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
			LED_off(pedestrian_lights, yellow_light);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
			
			TIMER_reset();
 244:	0e 94 c6 02 	call	0x58c	; 0x58c <TIMER_reset>
 248:	15 c0       	rjmp	.+42     	; 0x274 <__vector_1+0x7e>
		}
		
// If level 3 button is touched, red light wait time for automobiles is reset, and pedestrians' green and red lights are turned on.		
else if(counter == level3){
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	59 f4       	brne	.+22     	; 0x264 <__vector_1+0x6e>
			TIMER_reset();
 24e:	0e 94 c6 02 	call	0x58c	; 0x58c <TIMER_reset>
			LED_off(pedestrian_lights, red_light);
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
			LED_on(pedestrian_lights, green_light);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	82 e4       	ldi	r24, 0x42	; 66
 25e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
 262:	08 c0       	rjmp	.+16     	; 0x274 <__vector_1+0x7e>
		}
		
		// if pushed in level4 it skips the remaining wait time for automobiles with blinking yellow lights and returns to level2. 
		// Reversing the count variable to level2 causes the car's light to go from yellow to green to red once more.
		else if(counter == level4){
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	31 f4       	brne	.+12     	; 0x274 <__vector_1+0x7e>
			ovf=20;
 268:	84 e1       	ldi	r24, 0x14	; 20
 26a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ovf>
			counter = level2;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <counter>
		}
		
// The pedestrian mode is indicated by setting the first click variable to 1. When all 4 levels are finished, it is reset to 0.
		initialpress=1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <initialpress>
	}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <LED_init>:
#include "led.h"

void LED_init(uint8_t ledport,uint8_t ledpin)
{
	
	DIO_init(ledport ,ledpin,OUT);//output
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_init>
 2a2:	08 95       	ret

000002a4 <LED_on>:
}

void LED_on(uint8_t ledport,uint8_t ledpin)
{
	
	DIO_write(ledport ,ledpin,HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_write>
 2aa:	08 95       	ret

000002ac <LED_off>:
}
void LED_off(uint8_t ledport,uint8_t ledpin){
		DIO_write(ledport ,ledpin,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_write>
 2b2:	08 95       	ret

000002b4 <LED_toggle>:

}
void LED_toggle(uint8_t ledport,uint8_t ledpin){
	DIO_toggle(ledport ,ledpin);
 2b4:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_toggle>
 2b8:	08 95       	ret

000002ba <main>:
#include "Aplication/APP.h"

//Starting the application and calling all the functions
int main(void)
{
App_init();
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	while (1)
	{
		App_start();
 2be:	0e 94 72 00 	call	0xe4	; 0xe4 <App_start>
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <main+0x4>

000002c4 <DIO_init>:
		break;
		case PORT_C:
		*value = pin_getting(PINA, PINnumber);
		break;
		case PORT_D:
		*value = pin_getting(PINA, PINnumber);
 2c4:	82 34       	cpi	r24, 0x42	; 66
 2c6:	79 f1       	breq	.+94     	; 0x326 <DIO_init+0x62>
 2c8:	18 f4       	brcc	.+6      	; 0x2d0 <DIO_init+0xc>
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	41 f0       	breq	.+16     	; 0x2de <DIO_init+0x1a>
 2ce:	08 95       	ret
 2d0:	83 34       	cpi	r24, 0x43	; 67
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <DIO_init+0x12>
 2d4:	44 c0       	rjmp	.+136    	; 0x35e <DIO_init+0x9a>
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_init+0x18>
 2da:	5c c0       	rjmp	.+184    	; 0x394 <DIO_init+0xd0>
 2dc:	08 95       	ret
 2de:	41 11       	cpse	r20, r1
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <DIO_init+0x36>
 2e2:	2a b3       	in	r18, 0x1a	; 26
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_init+0x2a>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_init+0x26>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	8a bb       	out	0x1a, r24	; 26
 2f8:	08 95       	ret
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	59 f4       	brne	.+22     	; 0x314 <DIO_init+0x50>
 2fe:	2a b3       	in	r18, 0x1a	; 26
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_init+0x46>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_init+0x42>
 30e:	82 2b       	or	r24, r18
 310:	8a bb       	out	0x1a, r24	; 26
 312:	08 95       	ret
 314:	80 e6       	ldi	r24, 0x60	; 96
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	0e 94 18 03 	call	0x630	; 0x630 <printf>
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	08 95       	ret
 326:	41 11       	cpse	r20, r1
 328:	0c c0       	rjmp	.+24     	; 0x342 <DIO_init+0x7e>
 32a:	27 b3       	in	r18, 0x17	; 23
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_init+0x72>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_init+0x6e>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	87 bb       	out	0x17, r24	; 23
 340:	08 95       	ret
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <DIO_init+0x84>
 346:	40 c0       	rjmp	.+128    	; 0x3c8 <DIO_init+0x104>
 348:	27 b3       	in	r18, 0x17	; 23
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_init+0x90>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_init+0x8c>
 358:	82 2b       	or	r24, r18
 35a:	87 bb       	out	0x17, r24	; 23
 35c:	08 95       	ret
 35e:	41 11       	cpse	r20, r1
 360:	0c c0       	rjmp	.+24     	; 0x37a <DIO_init+0xb6>
 362:	24 b3       	in	r18, 0x14	; 20
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0xaa>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0xa6>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	84 bb       	out	0x14, r24	; 20
 378:	08 95       	ret
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	29 f5       	brne	.+74     	; 0x3c8 <DIO_init+0x104>
 37e:	24 b3       	in	r18, 0x14	; 20
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_init+0xc6>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_init+0xc2>
 38e:	82 2b       	or	r24, r18
 390:	84 bb       	out	0x14, r24	; 20
 392:	08 95       	ret
 394:	41 11       	cpse	r20, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <DIO_init+0xec>
 398:	21 b3       	in	r18, 0x11	; 17
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_init+0xe0>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_init+0xdc>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	81 bb       	out	0x11, r24	; 17
 3ae:	08 95       	ret
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	51 f4       	brne	.+20     	; 0x3c8 <DIO_init+0x104>
 3b4:	21 b3       	in	r18, 0x11	; 17
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_init+0xfc>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_init+0xf8>
 3c4:	82 2b       	or	r24, r18
 3c6:	81 bb       	out	0x11, r24	; 17
 3c8:	08 95       	ret

000003ca <DIO_write>:
 3ca:	82 34       	cpi	r24, 0x42	; 66
 3cc:	31 f1       	breq	.+76     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3ce:	18 f4       	brcc	.+6      	; 0x3d6 <DIO_write+0xc>
 3d0:	81 34       	cpi	r24, 0x41	; 65
 3d2:	39 f0       	breq	.+14     	; 0x3e2 <DIO_write+0x18>
 3d4:	08 95       	ret
 3d6:	83 34       	cpi	r24, 0x43	; 67
 3d8:	e1 f1       	breq	.+120    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3da:	84 34       	cpi	r24, 0x44	; 68
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_write+0x16>
 3de:	54 c0       	rjmp	.+168    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 3e0:	08 95       	ret
 3e2:	41 11       	cpse	r20, r1
 3e4:	0c c0       	rjmp	.+24     	; 0x3fe <DIO_write+0x34>
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_write+0x28>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_write+0x24>
 3f6:	80 95       	com	r24
 3f8:	82 23       	and	r24, r18
 3fa:	8b bb       	out	0x1b, r24	; 27
 3fc:	08 95       	ret
 3fe:	41 30       	cpi	r20, 0x01	; 1
 400:	09 f0       	breq	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	5c c0       	rjmp	.+184    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 404:	2b b3       	in	r18, 0x1b	; 27
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	82 2b       	or	r24, r18
 416:	8b bb       	out	0x1b, r24	; 27
 418:	08 95       	ret
 41a:	41 11       	cpse	r20, r1
 41c:	0c c0       	rjmp	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	28 b3       	in	r18, 0x18	; 24
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	80 95       	com	r24
 430:	82 23       	and	r24, r18
 432:	88 bb       	out	0x18, r24	; 24
 434:	08 95       	ret
 436:	41 30       	cpi	r20, 0x01	; 1
 438:	09 f0       	breq	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	40 c0       	rjmp	.+128    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 43c:	28 b3       	in	r18, 0x18	; 24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	82 2b       	or	r24, r18
 44e:	88 bb       	out	0x18, r24	; 24
 450:	08 95       	ret
 452:	41 11       	cpse	r20, r1
 454:	0c c0       	rjmp	.+24     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 456:	25 b3       	in	r18, 0x15	; 21
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	85 bb       	out	0x15, r24	; 21
 46c:	08 95       	ret
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	29 f5       	brne	.+74     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 472:	25 b3       	in	r18, 0x15	; 21
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	85 bb       	out	0x15, r24	; 21
 486:	08 95       	ret
 488:	41 11       	cpse	r20, r1
 48a:	0c c0       	rjmp	.+24     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 48c:	22 b3       	in	r18, 0x12	; 18
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	82 bb       	out	0x12, r24	; 18
 4a2:	08 95       	ret
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	51 f4       	brne	.+20     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4a8:	22 b3       	in	r18, 0x12	; 18
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	82 2b       	or	r24, r18
 4ba:	82 bb       	out	0x12, r24	; 18
 4bc:	08 95       	ret

000004be <DIO_toggle>:
	
}


void DIO_toggle(uint8_t portname, uint8_t PINnumber){
	switch(portname){
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	a1 f0       	breq	.+40     	; 0x4ea <DIO_toggle+0x2c>
 4c2:	18 f4       	brcc	.+6      	; 0x4ca <DIO_toggle+0xc>
 4c4:	81 34       	cpi	r24, 0x41	; 65
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <DIO_toggle+0x16>
 4c8:	08 95       	ret
 4ca:	83 34       	cpi	r24, 0x43	; 67
 4cc:	c9 f0       	breq	.+50     	; 0x500 <DIO_toggle+0x42>
 4ce:	84 34       	cpi	r24, 0x44	; 68
 4d0:	11 f1       	breq	.+68     	; 0x516 <DIO_toggle+0x58>
 4d2:	08 95       	ret
		case PORT_A:
		pin_toggle(PORTA, PINnumber);
 4d4:	2b b3       	in	r18, 0x1b	; 27
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_toggle+0x22>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_toggle+0x1e>
 4e4:	82 27       	eor	r24, r18
 4e6:	8b bb       	out	0x1b, r24	; 27
		break;
 4e8:	08 95       	ret
		
		case PORT_B:
		pin_toggle(PORTB, PINnumber);
 4ea:	28 b3       	in	r18, 0x18	; 24
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_toggle+0x38>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_toggle+0x34>
 4fa:	82 27       	eor	r24, r18
 4fc:	88 bb       	out	0x18, r24	; 24
		break;
 4fe:	08 95       	ret
		
		case PORT_C:
		pin_toggle(PORTC, PINnumber);
 500:	25 b3       	in	r18, 0x15	; 21
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_toggle+0x4e>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_toggle+0x4a>
 510:	82 27       	eor	r24, r18
 512:	85 bb       	out	0x15, r24	; 21
		break;
 514:	08 95       	ret
		
		case PORT_D:
		pin_toggle(PORTD, PINnumber);
 516:	22 b3       	in	r18, 0x12	; 18
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_toggle+0x64>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_toggle+0x60>
 526:	82 27       	eor	r24, r18
 528:	82 bb       	out	0x12, r24	; 18
 52a:	08 95       	ret

0000052c <INTERRUPT_global_init>:
 */ 
#include "interrupt.h"

void INTERRUPT_global_init(){
//activating the interrupt in the register's status
	pin_choose(SREG, 7);
 52c:	8f b7       	in	r24, 0x3f	; 63
 52e:	80 68       	ori	r24, 0x80	; 128
 530:	8f bf       	out	0x3f, r24	; 63
 532:	08 95       	ret

00000534 <INTERRUPT_T0_ovf_init>:



void INTERRUPT_T0_ovf_init(){
	//turning on the t0_ovf interrupt
	pin_choose(TIMSK, 0);
 534:	89 b7       	in	r24, 0x39	; 57
 536:	81 60       	ori	r24, 0x01	; 1
 538:	89 bf       	out	0x39, r24	; 57
 53a:	08 95       	ret

0000053c <INTERRUPT_0_init>:
}



void INTERRUPT_0_init(){
	pin_choose(MCUCR, 0);
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	85 bf       	out	0x35, r24	; 53
	pin_choose(MCUCR, 1);
 542:	85 b7       	in	r24, 0x35	; 53
 544:	82 60       	ori	r24, 0x02	; 2
 546:	85 bf       	out	0x35, r24	; 53
	pin_choose(GICR, 6);
 548:	8b b7       	in	r24, 0x3b	; 59
 54a:	80 64       	ori	r24, 0x40	; 64
 54c:	8b bf       	out	0x3b, r24	; 59
 54e:	08 95       	ret

00000550 <setcallback>:
//Function pointer that saves the address of the function that was supplied to the callback function.
void static (*callbackvar)(uint8_t portname, uint8_t pinnum);

// Executes the address of the toggle function from the top layers in timer 0 overflow to cause the yellow lights to flicker.
void setcallback(void (*cbvar)(uint8_t portname, uint8_t pinnum)){
	callbackvar = cbvar;
 550:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <callbackvar+0x1>
 554:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <callbackvar>
 558:	08 95       	ret

0000055a <TIMER_0_set_init_value>:
	TIMER_0_set_init_value(init_value);
}

//assigning a starting value following a computation
void TIMER_0_set_init_value(uint8_t val){
	TCNT0 = val;
 55a:	82 bf       	out	0x32, r24	; 50
 55c:	08 95       	ret

0000055e <TIMER_0_init>:



//selecting normal mode
void TIMER_0_init(){
	TCCR0 |= ((0<<3) | (0<<6));
 55e:	83 b7       	in	r24, 0x33	; 51
 560:	83 bf       	out	0x33, r24	; 51
	
	TIMER_0_set_init_value(init_value);
 562:	8b e0       	ldi	r24, 0x0B	; 11
 564:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_set_init_value>
 568:	08 95       	ret

0000056a <TIMER_0_start>:
	TCNT0 = val;
}

	// Selecting the 1024 prescaler
void TIMER_0_start(){
	TCCR0 |= ((1<<0) | (1<<2));
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	85 60       	ori	r24, 0x05	; 5
 56e:	83 bf       	out	0x33, r24	; 51
	
	// Waiting the overflow counter to reach 20
	while(ovf <20);
 570:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ovf>
 574:	84 31       	cpi	r24, 0x14	; 20
 576:	e0 f3       	brcs	.-8      	; 0x570 <TIMER_0_start+0x6>
}
 578:	08 95       	ret

0000057a <TIMER_0_stop>:


void TIMER_0_stop(){
	// Setting control register to 0 (no prescaler) to stop the timer
	TCCR0 = 0;
 57a:	13 be       	out	0x33, r1	; 51
	
	// Resetting overflow counter
	ovf = 0;
 57c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ovf>
 580:	08 95       	ret

00000582 <TIMER_0_delay>:
}

// Delay function that perform the 5 seconds delay
void TIMER_0_delay(){
	TIMER_0_start();
 582:	0e 94 b5 02 	call	0x56a	; 0x56a <TIMER_0_start>
	TIMER_0_stop();
 586:	0e 94 bd 02 	call	0x57a	; 0x57a <TIMER_0_stop>
 58a:	08 95       	ret

0000058c <TIMER_reset>:
}

// This function resets timer without stopping it
void TIMER_reset(){
	TIMER_0_set_init_value(init_value);
 58c:	8b e0       	ldi	r24, 0x0B	; 11
 58e:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_set_init_value>
	ovf = 0;
 592:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ovf>
 596:	08 95       	ret

00000598 <__vector_11>:
}

// Timer_0 overflow interrupt
ISR(TIMER_0_OVF){
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
	// Resetting initial value for the next timer cycle
	TIMER_0_set_init_value(init_value);
 5ba:	8b e0       	ldi	r24, 0x0B	; 11
 5bc:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_set_init_value>
	
	// Incrementing overflow variable
	ovf++;
 5c0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ovf>
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ovf>
	
	// Blinking yellow lights only in phase_2 and phase_4
	if(counting== level2 || counting == level4){
 5ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counting>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <__vector_11+0x3e>
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	e1 f4       	brne	.+56     	; 0x60e <__vector_11+0x76>
		// Only blink cars yellow light in normal mode
		if(!firstpress){
 5d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <firstpress>
 5da:	81 11       	cpse	r24, r1
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <__vector_11+0x56>
			callbackvar(traffic_lights, yellow_light);
 5de:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <callbackvar>
 5e2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <callbackvar+0x1>
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	81 e4       	ldi	r24, 0x41	; 65
 5ea:	09 95       	icall
 5ec:	10 c0       	rjmp	.+32     	; 0x60e <__vector_11+0x76>
		}
		// Blink both yellow lights in pedestrian mode
		else if(firstpress){
 5ee:	88 23       	and	r24, r24
 5f0:	71 f0       	breq	.+28     	; 0x60e <__vector_11+0x76>
			callbackvar(traffic_lights, yellow_light);
 5f2:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <callbackvar>
 5f6:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <callbackvar+0x1>
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	81 e4       	ldi	r24, 0x41	; 65
 5fe:	09 95       	icall
			callbackvar(pedestrian_lights, yellow_light);
 600:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <callbackvar>
 604:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <callbackvar+0x1>
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	82 e4       	ldi	r24, 0x42	; 66
 60c:	09 95       	icall
		}
	}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <printf>:
 630:	a0 e0       	ldi	r26, 0x00	; 0
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee e1       	ldi	r30, 0x1E	; 30
 636:	f3 e0       	ldi	r31, 0x03	; 3
 638:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__prologue_saves__+0x20>
 63c:	ae 01       	movw	r20, r28
 63e:	4b 5f       	subi	r20, 0xFB	; 251
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	fa 01       	movw	r30, r20
 644:	61 91       	ld	r22, Z+
 646:	71 91       	ld	r23, Z+
 648:	af 01       	movw	r20, r30
 64a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__iob+0x2>
 64e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__iob+0x3>
 652:	0e 94 2e 03 	call	0x65c	; 0x65c <vfprintf>
 656:	e2 e0       	ldi	r30, 0x02	; 2
 658:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__epilogue_restores__+0x20>

0000065c <vfprintf>:
 65c:	ab e0       	ldi	r26, 0x0B	; 11
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e4 e3       	ldi	r30, 0x34	; 52
 662:	f3 e0       	ldi	r31, 0x03	; 3
 664:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__prologue_saves__>
 668:	6c 01       	movw	r12, r24
 66a:	7b 01       	movw	r14, r22
 66c:	8a 01       	movw	r16, r20
 66e:	fc 01       	movw	r30, r24
 670:	17 82       	std	Z+7, r1	; 0x07
 672:	16 82       	std	Z+6, r1	; 0x06
 674:	83 81       	ldd	r24, Z+3	; 0x03
 676:	81 ff       	sbrs	r24, 1
 678:	cc c1       	rjmp	.+920    	; 0xa12 <__stack+0x1b3>
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	3c 01       	movw	r6, r24
 680:	f6 01       	movw	r30, r12
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	f7 01       	movw	r30, r14
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	7f 01       	movw	r14, r30
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <vfprintf+0x3a>
 694:	ba c1       	rjmp	.+884    	; 0xa0a <__stack+0x1ab>
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	39 f4       	brne	.+14     	; 0x6a8 <vfprintf+0x4c>
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	7f 01       	movw	r14, r30
 6a4:	85 32       	cpi	r24, 0x25	; 37
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <vfprintf+0x56>
 6a8:	b6 01       	movw	r22, r12
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 6b0:	e7 cf       	rjmp	.-50     	; 0x680 <vfprintf+0x24>
 6b2:	91 2c       	mov	r9, r1
 6b4:	21 2c       	mov	r2, r1
 6b6:	31 2c       	mov	r3, r1
 6b8:	ff e1       	ldi	r31, 0x1F	; 31
 6ba:	f3 15       	cp	r31, r3
 6bc:	d8 f0       	brcs	.+54     	; 0x6f4 <vfprintf+0x98>
 6be:	8b 32       	cpi	r24, 0x2B	; 43
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0x84>
 6c2:	38 f4       	brcc	.+14     	; 0x6d2 <vfprintf+0x76>
 6c4:	80 32       	cpi	r24, 0x20	; 32
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <vfprintf+0x8a>
 6c8:	83 32       	cpi	r24, 0x23	; 35
 6ca:	a1 f4       	brne	.+40     	; 0x6f4 <vfprintf+0x98>
 6cc:	23 2d       	mov	r18, r3
 6ce:	20 61       	ori	r18, 0x10	; 16
 6d0:	1d c0       	rjmp	.+58     	; 0x70c <vfprintf+0xb0>
 6d2:	8d 32       	cpi	r24, 0x2D	; 45
 6d4:	61 f0       	breq	.+24     	; 0x6ee <vfprintf+0x92>
 6d6:	80 33       	cpi	r24, 0x30	; 48
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <vfprintf+0x98>
 6da:	23 2d       	mov	r18, r3
 6dc:	21 60       	ori	r18, 0x01	; 1
 6de:	16 c0       	rjmp	.+44     	; 0x70c <vfprintf+0xb0>
 6e0:	83 2d       	mov	r24, r3
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	38 2e       	mov	r3, r24
 6e6:	e3 2d       	mov	r30, r3
 6e8:	e4 60       	ori	r30, 0x04	; 4
 6ea:	3e 2e       	mov	r3, r30
 6ec:	2a c0       	rjmp	.+84     	; 0x742 <vfprintf+0xe6>
 6ee:	f3 2d       	mov	r31, r3
 6f0:	f8 60       	ori	r31, 0x08	; 8
 6f2:	1d c0       	rjmp	.+58     	; 0x72e <vfprintf+0xd2>
 6f4:	37 fc       	sbrc	r3, 7
 6f6:	2d c0       	rjmp	.+90     	; 0x752 <vfprintf+0xf6>
 6f8:	20 ed       	ldi	r18, 0xD0	; 208
 6fa:	28 0f       	add	r18, r24
 6fc:	2a 30       	cpi	r18, 0x0A	; 10
 6fe:	40 f0       	brcs	.+16     	; 0x710 <vfprintf+0xb4>
 700:	8e 32       	cpi	r24, 0x2E	; 46
 702:	b9 f4       	brne	.+46     	; 0x732 <vfprintf+0xd6>
 704:	36 fc       	sbrc	r3, 6
 706:	81 c1       	rjmp	.+770    	; 0xa0a <__stack+0x1ab>
 708:	23 2d       	mov	r18, r3
 70a:	20 64       	ori	r18, 0x40	; 64
 70c:	32 2e       	mov	r3, r18
 70e:	19 c0       	rjmp	.+50     	; 0x742 <vfprintf+0xe6>
 710:	36 fe       	sbrs	r3, 6
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0xc4>
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	98 9e       	mul	r9, r24
 718:	20 0d       	add	r18, r0
 71a:	11 24       	eor	r1, r1
 71c:	92 2e       	mov	r9, r18
 71e:	11 c0       	rjmp	.+34     	; 0x742 <vfprintf+0xe6>
 720:	ea e0       	ldi	r30, 0x0A	; 10
 722:	2e 9e       	mul	r2, r30
 724:	20 0d       	add	r18, r0
 726:	11 24       	eor	r1, r1
 728:	22 2e       	mov	r2, r18
 72a:	f3 2d       	mov	r31, r3
 72c:	f0 62       	ori	r31, 0x20	; 32
 72e:	3f 2e       	mov	r3, r31
 730:	08 c0       	rjmp	.+16     	; 0x742 <vfprintf+0xe6>
 732:	8c 36       	cpi	r24, 0x6C	; 108
 734:	21 f4       	brne	.+8      	; 0x73e <vfprintf+0xe2>
 736:	83 2d       	mov	r24, r3
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	38 2e       	mov	r3, r24
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0xe6>
 73e:	88 36       	cpi	r24, 0x68	; 104
 740:	41 f4       	brne	.+16     	; 0x752 <vfprintf+0xf6>
 742:	f7 01       	movw	r30, r14
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	7f 01       	movw	r14, r30
 74e:	81 11       	cpse	r24, r1
 750:	b3 cf       	rjmp	.-154    	; 0x6b8 <vfprintf+0x5c>
 752:	98 2f       	mov	r25, r24
 754:	9f 7d       	andi	r25, 0xDF	; 223
 756:	95 54       	subi	r25, 0x45	; 69
 758:	93 30       	cpi	r25, 0x03	; 3
 75a:	28 f4       	brcc	.+10     	; 0x766 <vfprintf+0x10a>
 75c:	0c 5f       	subi	r16, 0xFC	; 252
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	9f e3       	ldi	r25, 0x3F	; 63
 762:	99 83       	std	Y+1, r25	; 0x01
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x124>
 766:	83 36       	cpi	r24, 0x63	; 99
 768:	31 f0       	breq	.+12     	; 0x776 <vfprintf+0x11a>
 76a:	83 37       	cpi	r24, 0x73	; 115
 76c:	71 f0       	breq	.+28     	; 0x78a <vfprintf+0x12e>
 76e:	83 35       	cpi	r24, 0x53	; 83
 770:	09 f0       	breq	.+2      	; 0x774 <vfprintf+0x118>
 772:	59 c0       	rjmp	.+178    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 774:	21 c0       	rjmp	.+66     	; 0x7b8 <vfprintf+0x15c>
 776:	f8 01       	movw	r30, r16
 778:	80 81       	ld	r24, Z
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	0e 5f       	subi	r16, 0xFE	; 254
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	88 24       	eor	r8, r8
 782:	83 94       	inc	r8
 784:	91 2c       	mov	r9, r1
 786:	53 01       	movw	r10, r6
 788:	13 c0       	rjmp	.+38     	; 0x7b0 <vfprintf+0x154>
 78a:	28 01       	movw	r4, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	4f 0e       	add	r4, r31
 790:	51 1c       	adc	r5, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	36 fe       	sbrs	r3, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x146>
 79c:	69 2d       	mov	r22, r9
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x14a>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	0e 94 1a 05 	call	0xa34	; 0xa34 <strnlen>
 7ac:	4c 01       	movw	r8, r24
 7ae:	82 01       	movw	r16, r4
 7b0:	f3 2d       	mov	r31, r3
 7b2:	ff 77       	andi	r31, 0x7F	; 127
 7b4:	3f 2e       	mov	r3, r31
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <vfprintf+0x188>
 7b8:	28 01       	movw	r4, r16
 7ba:	22 e0       	ldi	r18, 0x02	; 2
 7bc:	42 0e       	add	r4, r18
 7be:	51 1c       	adc	r5, r1
 7c0:	f8 01       	movw	r30, r16
 7c2:	a0 80       	ld	r10, Z
 7c4:	b1 80       	ldd	r11, Z+1	; 0x01
 7c6:	36 fe       	sbrs	r3, 6
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <vfprintf+0x174>
 7ca:	69 2d       	mov	r22, r9
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x178>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c5 01       	movw	r24, r10
 7d6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <strnlen_P>
 7da:	4c 01       	movw	r8, r24
 7dc:	f3 2d       	mov	r31, r3
 7de:	f0 68       	ori	r31, 0x80	; 128
 7e0:	3f 2e       	mov	r3, r31
 7e2:	82 01       	movw	r16, r4
 7e4:	33 fc       	sbrc	r3, 3
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7e8:	82 2d       	mov	r24, r2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	88 16       	cp	r8, r24
 7ee:	99 06       	cpc	r9, r25
 7f0:	b0 f4       	brcc	.+44     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f2:	b6 01       	movw	r22, r12
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 7fc:	2a 94       	dec	r2
 7fe:	f4 cf       	rjmp	.-24     	; 0x7e8 <vfprintf+0x18c>
 800:	f5 01       	movw	r30, r10
 802:	37 fc       	sbrc	r3, 7
 804:	85 91       	lpm	r24, Z+
 806:	37 fe       	sbrs	r3, 7
 808:	81 91       	ld	r24, Z+
 80a:	5f 01       	movw	r10, r30
 80c:	b6 01       	movw	r22, r12
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 814:	21 10       	cpse	r2, r1
 816:	2a 94       	dec	r2
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	82 1a       	sub	r8, r18
 81c:	91 08       	sbc	r9, r1
 81e:	81 14       	cp	r8, r1
 820:	91 04       	cpc	r9, r1
 822:	71 f7       	brne	.-36     	; 0x800 <__DATA_REGION_LENGTH__>
 824:	e8 c0       	rjmp	.+464    	; 0x9f6 <__stack+0x197>
 826:	84 36       	cpi	r24, 0x64	; 100
 828:	11 f0       	breq	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82a:	89 36       	cpi	r24, 0x69	; 105
 82c:	41 f5       	brne	.+80     	; 0x87e <__stack+0x1f>
 82e:	f8 01       	movw	r30, r16
 830:	37 fe       	sbrs	r3, 7
 832:	07 c0       	rjmp	.+14     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	0c 5f       	subi	r16, 0xFC	; 252
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	08 c0       	rjmp	.+16     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 842:	60 81       	ld	r22, Z
 844:	71 81       	ldd	r23, Z+1	; 0x01
 846:	07 2e       	mov	r0, r23
 848:	00 0c       	add	r0, r0
 84a:	88 0b       	sbc	r24, r24
 84c:	99 0b       	sbc	r25, r25
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	f3 2d       	mov	r31, r3
 854:	ff 76       	andi	r31, 0x6F	; 111
 856:	3f 2e       	mov	r3, r31
 858:	97 ff       	sbrs	r25, 7
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__stack+0xf>
 85c:	90 95       	com	r25
 85e:	80 95       	com	r24
 860:	70 95       	com	r23
 862:	61 95       	neg	r22
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	f0 68       	ori	r31, 0x80	; 128
 86c:	3f 2e       	mov	r3, r31
 86e:	2a e0       	ldi	r18, 0x0A	; 10
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	a3 01       	movw	r20, r6
 874:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 878:	88 2e       	mov	r8, r24
 87a:	86 18       	sub	r8, r6
 87c:	45 c0       	rjmp	.+138    	; 0x908 <__stack+0xa9>
 87e:	85 37       	cpi	r24, 0x75	; 117
 880:	31 f4       	brne	.+12     	; 0x88e <__stack+0x2f>
 882:	23 2d       	mov	r18, r3
 884:	2f 7e       	andi	r18, 0xEF	; 239
 886:	b2 2e       	mov	r11, r18
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	25 c0       	rjmp	.+74     	; 0x8d8 <__stack+0x79>
 88e:	93 2d       	mov	r25, r3
 890:	99 7f       	andi	r25, 0xF9	; 249
 892:	b9 2e       	mov	r11, r25
 894:	8f 36       	cpi	r24, 0x6F	; 111
 896:	c1 f0       	breq	.+48     	; 0x8c8 <__stack+0x69>
 898:	18 f4       	brcc	.+6      	; 0x8a0 <__stack+0x41>
 89a:	88 35       	cpi	r24, 0x58	; 88
 89c:	79 f0       	breq	.+30     	; 0x8bc <__stack+0x5d>
 89e:	b5 c0       	rjmp	.+362    	; 0xa0a <__stack+0x1ab>
 8a0:	80 37       	cpi	r24, 0x70	; 112
 8a2:	19 f0       	breq	.+6      	; 0x8aa <__stack+0x4b>
 8a4:	88 37       	cpi	r24, 0x78	; 120
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <__stack+0x51>
 8a8:	b0 c0       	rjmp	.+352    	; 0xa0a <__stack+0x1ab>
 8aa:	e9 2f       	mov	r30, r25
 8ac:	e0 61       	ori	r30, 0x10	; 16
 8ae:	be 2e       	mov	r11, r30
 8b0:	b4 fe       	sbrs	r11, 4
 8b2:	0d c0       	rjmp	.+26     	; 0x8ce <__stack+0x6f>
 8b4:	fb 2d       	mov	r31, r11
 8b6:	f4 60       	ori	r31, 0x04	; 4
 8b8:	bf 2e       	mov	r11, r31
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__stack+0x6f>
 8bc:	34 fe       	sbrs	r3, 4
 8be:	0a c0       	rjmp	.+20     	; 0x8d4 <__stack+0x75>
 8c0:	29 2f       	mov	r18, r25
 8c2:	26 60       	ori	r18, 0x06	; 6
 8c4:	b2 2e       	mov	r11, r18
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <__stack+0x75>
 8c8:	28 e0       	ldi	r18, 0x08	; 8
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__stack+0x79>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	32 e0       	ldi	r19, 0x02	; 2
 8d8:	f8 01       	movw	r30, r16
 8da:	b7 fe       	sbrs	r11, 7
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <__stack+0x8d>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	82 81       	ldd	r24, Z+2	; 0x02
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <__stack+0x99>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 5f       	subi	r16, 0xFE	; 254
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	a3 01       	movw	r20, r6
 8fa:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 8fe:	88 2e       	mov	r8, r24
 900:	86 18       	sub	r8, r6
 902:	fb 2d       	mov	r31, r11
 904:	ff 77       	andi	r31, 0x7F	; 127
 906:	3f 2e       	mov	r3, r31
 908:	36 fe       	sbrs	r3, 6
 90a:	0d c0       	rjmp	.+26     	; 0x926 <__stack+0xc7>
 90c:	23 2d       	mov	r18, r3
 90e:	2e 7f       	andi	r18, 0xFE	; 254
 910:	a2 2e       	mov	r10, r18
 912:	89 14       	cp	r8, r9
 914:	58 f4       	brcc	.+22     	; 0x92c <__stack+0xcd>
 916:	34 fe       	sbrs	r3, 4
 918:	0b c0       	rjmp	.+22     	; 0x930 <__stack+0xd1>
 91a:	32 fc       	sbrc	r3, 2
 91c:	09 c0       	rjmp	.+18     	; 0x930 <__stack+0xd1>
 91e:	83 2d       	mov	r24, r3
 920:	8e 7e       	andi	r24, 0xEE	; 238
 922:	a8 2e       	mov	r10, r24
 924:	05 c0       	rjmp	.+10     	; 0x930 <__stack+0xd1>
 926:	b8 2c       	mov	r11, r8
 928:	a3 2c       	mov	r10, r3
 92a:	03 c0       	rjmp	.+6      	; 0x932 <__stack+0xd3>
 92c:	b8 2c       	mov	r11, r8
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0xd3>
 930:	b9 2c       	mov	r11, r9
 932:	a4 fe       	sbrs	r10, 4
 934:	0f c0       	rjmp	.+30     	; 0x954 <__stack+0xf5>
 936:	fe 01       	movw	r30, r28
 938:	e8 0d       	add	r30, r8
 93a:	f1 1d       	adc	r31, r1
 93c:	80 81       	ld	r24, Z
 93e:	80 33       	cpi	r24, 0x30	; 48
 940:	21 f4       	brne	.+8      	; 0x94a <__stack+0xeb>
 942:	9a 2d       	mov	r25, r10
 944:	99 7e       	andi	r25, 0xE9	; 233
 946:	a9 2e       	mov	r10, r25
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0xfd>
 94a:	a2 fe       	sbrs	r10, 2
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0xfb>
 94e:	b3 94       	inc	r11
 950:	b3 94       	inc	r11
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0xfd>
 954:	8a 2d       	mov	r24, r10
 956:	86 78       	andi	r24, 0x86	; 134
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0xfd>
 95a:	b3 94       	inc	r11
 95c:	a3 fc       	sbrc	r10, 3
 95e:	11 c0       	rjmp	.+34     	; 0x982 <__stack+0x123>
 960:	a0 fe       	sbrs	r10, 0
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x111>
 964:	b2 14       	cp	r11, r2
 966:	88 f4       	brcc	.+34     	; 0x98a <__stack+0x12b>
 968:	28 0c       	add	r2, r8
 96a:	92 2c       	mov	r9, r2
 96c:	9b 18       	sub	r9, r11
 96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x12d>
 970:	b2 14       	cp	r11, r2
 972:	60 f4       	brcc	.+24     	; 0x98c <__stack+0x12d>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 97e:	b3 94       	inc	r11
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x111>
 982:	b2 14       	cp	r11, r2
 984:	18 f4       	brcc	.+6      	; 0x98c <__stack+0x12d>
 986:	2b 18       	sub	r2, r11
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x12f>
 98a:	98 2c       	mov	r9, r8
 98c:	21 2c       	mov	r2, r1
 98e:	a4 fe       	sbrs	r10, 4
 990:	10 c0       	rjmp	.+32     	; 0x9b2 <__stack+0x153>
 992:	b6 01       	movw	r22, r12
 994:	80 e3       	ldi	r24, 0x30	; 48
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	17 c0       	rjmp	.+46     	; 0x9ce <__stack+0x16f>
 9a0:	a1 fc       	sbrc	r10, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0x14b>
 9a4:	88 e7       	ldi	r24, 0x78	; 120
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0x14f>
 9aa:	88 e5       	ldi	r24, 0x58	; 88
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	b6 01       	movw	r22, r12
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__stack+0x16b>
 9b2:	8a 2d       	mov	r24, r10
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	59 f0       	breq	.+22     	; 0x9ce <__stack+0x16f>
 9b8:	a1 fe       	sbrs	r10, 1
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0x161>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0x163>
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	a7 fc       	sbrc	r10, 7
 9c4:	8d e2       	ldi	r24, 0x2D	; 45
 9c6:	b6 01       	movw	r22, r12
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9ce:	89 14       	cp	r8, r9
 9d0:	38 f4       	brcc	.+14     	; 0x9e0 <__stack+0x181>
 9d2:	b6 01       	movw	r22, r12
 9d4:	80 e3       	ldi	r24, 0x30	; 48
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9dc:	9a 94       	dec	r9
 9de:	f7 cf       	rjmp	.-18     	; 0x9ce <__stack+0x16f>
 9e0:	8a 94       	dec	r8
 9e2:	f3 01       	movw	r30, r6
 9e4:	e8 0d       	add	r30, r8
 9e6:	f1 1d       	adc	r31, r1
 9e8:	80 81       	ld	r24, Z
 9ea:	b6 01       	movw	r22, r12
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9f2:	81 10       	cpse	r8, r1
 9f4:	f5 cf       	rjmp	.-22     	; 0x9e0 <__stack+0x181>
 9f6:	22 20       	and	r2, r2
 9f8:	09 f4       	brne	.+2      	; 0x9fc <__stack+0x19d>
 9fa:	42 ce       	rjmp	.-892    	; 0x680 <vfprintf+0x24>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 a06:	2a 94       	dec	r2
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <__stack+0x197>
 a0a:	f6 01       	movw	r30, r12
 a0c:	86 81       	ldd	r24, Z+6	; 0x06
 a0e:	97 81       	ldd	r25, Z+7	; 0x07
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x1b7>
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	2b 96       	adiw	r28, 0x0b	; 11
 a18:	e2 e1       	ldi	r30, 0x12	; 18
 a1a:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__epilogue_restores__>

00000a1e <strnlen_P>:
 a1e:	fc 01       	movw	r30, r24
 a20:	05 90       	lpm	r0, Z+
 a22:	61 50       	subi	r22, 0x01	; 1
 a24:	70 40       	sbci	r23, 0x00	; 0
 a26:	01 10       	cpse	r0, r1
 a28:	d8 f7       	brcc	.-10     	; 0xa20 <strnlen_P+0x2>
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	8e 0f       	add	r24, r30
 a30:	9f 1f       	adc	r25, r31
 a32:	08 95       	ret

00000a34 <strnlen>:
 a34:	fc 01       	movw	r30, r24
 a36:	61 50       	subi	r22, 0x01	; 1
 a38:	70 40       	sbci	r23, 0x00	; 0
 a3a:	01 90       	ld	r0, Z+
 a3c:	01 10       	cpse	r0, r1
 a3e:	d8 f7       	brcc	.-10     	; 0xa36 <strnlen+0x2>
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	8e 0f       	add	r24, r30
 a46:	9f 1f       	adc	r25, r31
 a48:	08 95       	ret

00000a4a <fputc>:
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	fb 01       	movw	r30, r22
 a54:	23 81       	ldd	r18, Z+3	; 0x03
 a56:	21 fd       	sbrc	r18, 1
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <fputc+0x16>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	2c c0       	rjmp	.+88     	; 0xab8 <fputc+0x6e>
 a60:	22 ff       	sbrs	r18, 2
 a62:	16 c0       	rjmp	.+44     	; 0xa90 <fputc+0x46>
 a64:	46 81       	ldd	r20, Z+6	; 0x06
 a66:	57 81       	ldd	r21, Z+7	; 0x07
 a68:	24 81       	ldd	r18, Z+4	; 0x04
 a6a:	35 81       	ldd	r19, Z+5	; 0x05
 a6c:	42 17       	cp	r20, r18
 a6e:	53 07       	cpc	r21, r19
 a70:	44 f4       	brge	.+16     	; 0xa82 <fputc+0x38>
 a72:	a0 81       	ld	r26, Z
 a74:	b1 81       	ldd	r27, Z+1	; 0x01
 a76:	9d 01       	movw	r18, r26
 a78:	2f 5f       	subi	r18, 0xFF	; 255
 a7a:	3f 4f       	sbci	r19, 0xFF	; 255
 a7c:	31 83       	std	Z+1, r19	; 0x01
 a7e:	20 83       	st	Z, r18
 a80:	8c 93       	st	X, r24
 a82:	26 81       	ldd	r18, Z+6	; 0x06
 a84:	37 81       	ldd	r19, Z+7	; 0x07
 a86:	2f 5f       	subi	r18, 0xFF	; 255
 a88:	3f 4f       	sbci	r19, 0xFF	; 255
 a8a:	37 83       	std	Z+7, r19	; 0x07
 a8c:	26 83       	std	Z+6, r18	; 0x06
 a8e:	14 c0       	rjmp	.+40     	; 0xab8 <fputc+0x6e>
 a90:	8b 01       	movw	r16, r22
 a92:	ec 01       	movw	r28, r24
 a94:	fb 01       	movw	r30, r22
 a96:	00 84       	ldd	r0, Z+8	; 0x08
 a98:	f1 85       	ldd	r31, Z+9	; 0x09
 a9a:	e0 2d       	mov	r30, r0
 a9c:	09 95       	icall
 a9e:	89 2b       	or	r24, r25
 aa0:	e1 f6       	brne	.-72     	; 0xa5a <fputc+0x10>
 aa2:	d8 01       	movw	r26, r16
 aa4:	16 96       	adiw	r26, 0x06	; 6
 aa6:	8d 91       	ld	r24, X+
 aa8:	9c 91       	ld	r25, X
 aaa:	17 97       	sbiw	r26, 0x07	; 7
 aac:	01 96       	adiw	r24, 0x01	; 1
 aae:	17 96       	adiw	r26, 0x07	; 7
 ab0:	9c 93       	st	X, r25
 ab2:	8e 93       	st	-X, r24
 ab4:	16 97       	sbiw	r26, 0x06	; 6
 ab6:	ce 01       	movw	r24, r28
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	1f 91       	pop	r17
 abe:	0f 91       	pop	r16
 ac0:	08 95       	ret

00000ac2 <__ultoa_invert>:
 ac2:	fa 01       	movw	r30, r20
 ac4:	aa 27       	eor	r26, r26
 ac6:	28 30       	cpi	r18, 0x08	; 8
 ac8:	51 f1       	breq	.+84     	; 0xb1e <__ultoa_invert+0x5c>
 aca:	20 31       	cpi	r18, 0x10	; 16
 acc:	81 f1       	breq	.+96     	; 0xb2e <__ultoa_invert+0x6c>
 ace:	e8 94       	clt
 ad0:	6f 93       	push	r22
 ad2:	6e 7f       	andi	r22, 0xFE	; 254
 ad4:	6e 5f       	subi	r22, 0xFE	; 254
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	af 4f       	sbci	r26, 0xFF	; 255
 ade:	b1 e0       	ldi	r27, 0x01	; 1
 ae0:	3e d0       	rcall	.+124    	; 0xb5e <__ultoa_invert+0x9c>
 ae2:	b4 e0       	ldi	r27, 0x04	; 4
 ae4:	3c d0       	rcall	.+120    	; 0xb5e <__ultoa_invert+0x9c>
 ae6:	67 0f       	add	r22, r23
 ae8:	78 1f       	adc	r23, r24
 aea:	89 1f       	adc	r24, r25
 aec:	9a 1f       	adc	r25, r26
 aee:	a1 1d       	adc	r26, r1
 af0:	68 0f       	add	r22, r24
 af2:	79 1f       	adc	r23, r25
 af4:	8a 1f       	adc	r24, r26
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	6a 0f       	add	r22, r26
 afc:	71 1d       	adc	r23, r1
 afe:	81 1d       	adc	r24, r1
 b00:	91 1d       	adc	r25, r1
 b02:	a1 1d       	adc	r26, r1
 b04:	20 d0       	rcall	.+64     	; 0xb46 <__ultoa_invert+0x84>
 b06:	09 f4       	brne	.+2      	; 0xb0a <__ultoa_invert+0x48>
 b08:	68 94       	set
 b0a:	3f 91       	pop	r19
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	26 9f       	mul	r18, r22
 b10:	11 24       	eor	r1, r1
 b12:	30 19       	sub	r19, r0
 b14:	30 5d       	subi	r19, 0xD0	; 208
 b16:	31 93       	st	Z+, r19
 b18:	de f6       	brtc	.-74     	; 0xad0 <__ultoa_invert+0xe>
 b1a:	cf 01       	movw	r24, r30
 b1c:	08 95       	ret
 b1e:	46 2f       	mov	r20, r22
 b20:	47 70       	andi	r20, 0x07	; 7
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	41 93       	st	Z+, r20
 b26:	b3 e0       	ldi	r27, 0x03	; 3
 b28:	0f d0       	rcall	.+30     	; 0xb48 <__ultoa_invert+0x86>
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0x5c>
 b2c:	f6 cf       	rjmp	.-20     	; 0xb1a <__ultoa_invert+0x58>
 b2e:	46 2f       	mov	r20, r22
 b30:	4f 70       	andi	r20, 0x0F	; 15
 b32:	40 5d       	subi	r20, 0xD0	; 208
 b34:	4a 33       	cpi	r20, 0x3A	; 58
 b36:	18 f0       	brcs	.+6      	; 0xb3e <__ultoa_invert+0x7c>
 b38:	49 5d       	subi	r20, 0xD9	; 217
 b3a:	31 fd       	sbrc	r19, 1
 b3c:	40 52       	subi	r20, 0x20	; 32
 b3e:	41 93       	st	Z+, r20
 b40:	02 d0       	rcall	.+4      	; 0xb46 <__ultoa_invert+0x84>
 b42:	a9 f7       	brne	.-22     	; 0xb2e <__ultoa_invert+0x6c>
 b44:	ea cf       	rjmp	.-44     	; 0xb1a <__ultoa_invert+0x58>
 b46:	b4 e0       	ldi	r27, 0x04	; 4
 b48:	a6 95       	lsr	r26
 b4a:	97 95       	ror	r25
 b4c:	87 95       	ror	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	ba 95       	dec	r27
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x86>
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	61 05       	cpc	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	08 95       	ret
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	0a 2e       	mov	r0, r26
 b64:	06 94       	lsr	r0
 b66:	57 95       	ror	r21
 b68:	47 95       	ror	r20
 b6a:	37 95       	ror	r19
 b6c:	27 95       	ror	r18
 b6e:	ba 95       	dec	r27
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__ultoa_invert+0xa2>
 b72:	62 0f       	add	r22, r18
 b74:	73 1f       	adc	r23, r19
 b76:	84 1f       	adc	r24, r20
 b78:	95 1f       	adc	r25, r21
 b7a:	a0 1d       	adc	r26, r0
 b7c:	08 95       	ret

00000b7e <__prologue_saves__>:
 b7e:	2f 92       	push	r2
 b80:	3f 92       	push	r3
 b82:	4f 92       	push	r4
 b84:	5f 92       	push	r5
 b86:	6f 92       	push	r6
 b88:	7f 92       	push	r7
 b8a:	8f 92       	push	r8
 b8c:	9f 92       	push	r9
 b8e:	af 92       	push	r10
 b90:	bf 92       	push	r11
 b92:	cf 92       	push	r12
 b94:	df 92       	push	r13
 b96:	ef 92       	push	r14
 b98:	ff 92       	push	r15
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	cd b7       	in	r28, 0x3d	; 61
 ba4:	de b7       	in	r29, 0x3e	; 62
 ba6:	ca 1b       	sub	r28, r26
 ba8:	db 0b       	sbc	r29, r27
 baa:	0f b6       	in	r0, 0x3f	; 63
 bac:	f8 94       	cli
 bae:	de bf       	out	0x3e, r29	; 62
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	cd bf       	out	0x3d, r28	; 61
 bb4:	09 94       	ijmp

00000bb6 <__epilogue_restores__>:
 bb6:	2a 88       	ldd	r2, Y+18	; 0x12
 bb8:	39 88       	ldd	r3, Y+17	; 0x11
 bba:	48 88       	ldd	r4, Y+16	; 0x10
 bbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc8:	b9 84       	ldd	r11, Y+9	; 0x09
 bca:	c8 84       	ldd	r12, Y+8	; 0x08
 bcc:	df 80       	ldd	r13, Y+7	; 0x07
 bce:	ee 80       	ldd	r14, Y+6	; 0x06
 bd0:	fd 80       	ldd	r15, Y+5	; 0x05
 bd2:	0c 81       	ldd	r16, Y+4	; 0x04
 bd4:	1b 81       	ldd	r17, Y+3	; 0x03
 bd6:	aa 81       	ldd	r26, Y+2	; 0x02
 bd8:	b9 81       	ldd	r27, Y+1	; 0x01
 bda:	ce 0f       	add	r28, r30
 bdc:	d1 1d       	adc	r29, r1
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	ed 01       	movw	r28, r26
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
