
at2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114f  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  000019ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e9  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c0  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  74:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
void App_init(){
	
	
	
	// calling the Timer_0 function
	TIMER_0_init();
  7c:	0e 94 9b 02 	call	0x536	; 0x536 <TIMER_0_init>
	// setting the Timer_0 overflow interrupt
	INTERRUPT_T0_ovf_init();
  80:	0e 94 86 02 	call	0x50c	; 0x50c <INTERRUPT_T0_ovf_init>
	
	// Enabling the INT_0 interrupt
	INTERRUPT_0_init();
  84:	0e 94 8a 02 	call	0x514	; 0x514 <INTERRUPT_0_init>
	
	// the global interrupt is called here
	INTERRUPT_global_init();
  88:	0e 94 82 02 	call	0x504	; 0x504 <INTERRUPT_global_init>
	setcallback(LED_toggle);
  8c:	8f e4       	ldi	r24, 0x4F	; 79
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	0e 94 94 02 	call	0x528	; 0x528 <setcallback>
	
	BUTTON_init(PORT_D, 2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <BUTTON_init>
	
	
	// calling all the led pins as output because they are  output devices only.
	LED_init(traffic_lights, green_light);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(traffic_lights, yellow_light);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(traffic_lights, red_light);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(pedestrian_lights, green_light);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(pedestrian_lights, yellow_light);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(pedestrian_lights, red_light);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
  cc:	08 95       	ret

000000ce <App_start>:

void App_start(){
	
	//*Level1*//
	
	if(count_level == level1){
  ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
  d2:	81 11       	cpse	r24, r1
  d4:	18 c0       	rjmp	.+48     	; 0x106 <App_start+0x38>
		// first start of the normal mode loop
		LED_on(traffic_lights, green_light);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
		LED_on(pedestrian_lights, yellow_light);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
		
		// here this  function starts a 5 sec delay when the leds are turned on to prevent traffic confusion
		TIMER_0_delay();
  e6:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_delay>
	
		// here the count variable is added by one to switch to the next level, then modulus 4 to make the range of values from (0-3) 
		count_level = (count_level+1)%4;
  ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	83 70       	andi	r24, 0x03	; 3
  f4:	90 78       	andi	r25, 0x80	; 128
  f6:	99 23       	and	r25, r25
  f8:	24 f4       	brge	.+8      	; 0x102 <App_start+0x34>
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	8c 6f       	ori	r24, 0xFC	; 252
  fe:	9f 6f       	ori	r25, 0xFF	; 255
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_level>
	
	
	
	
	//*Level2*//
	if(count_level == level2){
 106:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	c1 f4       	brne	.+48     	; 0x13e <App_start+0x70>
		/*	in the level2 here the timer_0 overflow interrupt blinks the traffic lights --> yellow light in normal mode
			and both cars and pedestrian light--> yellow light in pedestrian mode. */
		TIMER_0_delay();
 10e:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_delay>
		
		// turning  the two yellow leds off to make the toggling end with an off state for the leds after the  blinking is done.
		LED_off(traffic_lights, yellow_light);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		LED_off(pedestrian_lights, yellow_light);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		
		count_level = (count_level+1)%4;
 122:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	83 70       	andi	r24, 0x03	; 3
 12c:	90 78       	andi	r25, 0x80	; 128
 12e:	99 23       	and	r25, r25
 130:	24 f4       	brge	.+8      	; 0x13a <App_start+0x6c>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	8c 6f       	ori	r24, 0xFC	; 252
 136:	9f 6f       	ori	r25, 0xFF	; 255
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_level>
	
	
	
	
	//*Level3*//
	if(count_level == level3){
 13e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	21 f5       	brne	.+72     	; 0x18e <App_start+0xc0>
		// the Program  enters this if statement only when  in pedestrian mode .
		if(startpress){
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	88 23       	and	r24, r24
 14c:	41 f0       	breq	.+16     	; 0x15e <App_start+0x90>
			LED_on(pedestrian_lights, green_light);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	82 e4       	ldi	r24, 0x42	; 66
 152:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			LED_off(pedestrian_lights, red_light);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		}
		
		//  turning on red traffic light and turning off green traffic light.
		LED_off(traffic_lights, green_light);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		LED_on(traffic_lights, red_light);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
		
		TIMER_0_delay();
 16e:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_delay>
		
		count_level = (count_level+1)%4;
 172:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	83 70       	andi	r24, 0x03	; 3
 17c:	90 78       	andi	r25, 0x80	; 128
 17e:	99 23       	and	r25, r25
 180:	24 f4       	brge	.+8      	; 0x18a <App_start+0xbc>
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	8c 6f       	ori	r24, 0xFC	; 252
 186:	9f 6f       	ori	r25, 0xFF	; 255
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_level>
	
	//*Level4*//
	
	/*	here in level4 , the timer_0 overflow makes the yellow traffic light blink in normal mode
		and both traffic and pedestrian yellow light in pedestrian mode. */
	TIMER_0_delay();
 18e:	0e 94 ad 02 	call	0x55a	; 0x55a <TIMER_0_delay>
	
	// Turned off the pedestrian green light in the case of pedestrian mode to exit and enter normal mode(traffic) level1 again.
	LED_off(pedestrian_lights, green_light);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
	
	// Turned off the traffic blinking yellow light in the case of normal mode to start again from Level1.
	LED_off(traffic_lights, yellow_light);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
	
	// Turned off the pedestrian yellow light in case of pedestrian mode to exit and enter normal mode phase_1 again.
	LED_off(pedestrian_lights, yellow_light);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	82 e4       	ldi	r24, 0x42	; 66
 1a6:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
	
	
	if(count_level == level4){
 1aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_level>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	91 f4       	brne	.+36     	; 0x1d6 <App_start+0x108>
		count_level = (count_level+1)%4;
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	83 70       	andi	r24, 0x03	; 3
 1b8:	90 78       	andi	r25, 0x80	; 128
 1ba:	99 23       	and	r25, r25
 1bc:	24 f4       	brge	.+8      	; 0x1c6 <App_start+0xf8>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	8c 6f       	ori	r24, 0xFC	; 252
 1c2:	9f 6f       	ori	r25, 0xFF	; 255
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_level>
		
		// Turning off cars blinking red light in case of normal mode to start again from phase_1.
		LED_off(traffic_lights, red_light);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		
		// Setting first_click flag to zero to indicate returning to normal mode.
		startpress=0;
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	08 95       	ret

000001d8 <BUTTON_init>:
}

//button  value  low(0) high(1) and calling the DIO function right away instead of creating a whole new function 
void BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t *value)
{
	DIO_read(buttonPort,buttonPin,value);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_init>
 1de:	08 95       	ret

000001e0 <__vector_1>:
}



ISR(EXT_INT_0){
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	
	

	
	if(!initialpress){
 202:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <initialpress>
 206:	81 11       	cpse	r24, r1
 208:	2d c0       	rjmp	.+90     	; 0x264 <__vector_1+0x84>
		
		// if pressed in level1 it jumps over the green light remaining wait time and turns on the traffic blinking yellow light
		if(counter == level1){
 20a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 20e:	81 11       	cpse	r24, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <__vector_1+0x3a>
			ovf=20;
 212:	84 e1       	ldi	r24, 0x14	; 20
 214:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ovf>
 218:	22 c0       	rjmp	.+68     	; 0x25e <__vector_1+0x7e>
		}
		
		// if pressed in level2 it resets the traffic lights blinking yellow light remaining wait time .
		else if(counter == level2){
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <__vector_1+0x54>
			
			LED_off(traffic_lights, yellow_light);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(pedestrian_lights, yellow_light);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	82 e4       	ldi	r24, 0x42	; 66
 22a:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			
			TIMER_reset();
 22e:	0e 94 b2 02 	call	0x564	; 0x564 <TIMER_reset>
 232:	15 c0       	rjmp	.+42     	; 0x25e <__vector_1+0x7e>
		}
		
// If level 3 button is touched, red light wait time for automobiles is reset, and pedestrians' green and red lights are turned on.		
else if(counter == level3){
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	59 f4       	brne	.+22     	; 0x24e <__vector_1+0x6e>
			TIMER_reset();
 238:	0e 94 b2 02 	call	0x564	; 0x564 <TIMER_reset>
			LED_off(pedestrian_lights, red_light);
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_on(pedestrian_lights, green_light);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	82 e4       	ldi	r24, 0x42	; 66
 248:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
 24c:	08 c0       	rjmp	.+16     	; 0x25e <__vector_1+0x7e>
		}
		
		// if pushed in level4 it skips the remaining wait time for automobiles with blinking yellow lights and returns to level2. 
		// Reversing the count variable to level2 causes the car's light to go from yellow to green to red once more.
		else if(counter == level4){
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	31 f4       	brne	.+12     	; 0x25e <__vector_1+0x7e>
			ovf=20;
 252:	84 e1       	ldi	r24, 0x14	; 20
 254:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ovf>
			counter = level2;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter>
		}
		
// The pedestrian mode is indicated by setting the first click variable to 1. When all 4 levels are finished, it is reset to 0.
		initialpress=1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <initialpress>
	}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <LED_init>:
#include "led.h"

void LED_init(uint8_t ledport,uint8_t ledpin)
{
	
	DIO_init(ledport ,ledpin,OUT);//output
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_init>
 28c:	08 95       	ret

0000028e <LED_on>:
}

void LED_on(uint8_t ledport,uint8_t ledpin)
{
	
	DIO_write(ledport ,ledpin,HIGH);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_write>
 294:	08 95       	ret

00000296 <LED_off>:
}
void LED_off(uint8_t ledport,uint8_t ledpin){
		DIO_write(ledport ,ledpin,LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_write>
 29c:	08 95       	ret

0000029e <LED_toggle>:

}
void LED_toggle(uint8_t ledport,uint8_t ledpin){
	DIO_toggle(ledport ,ledpin);
 29e:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_toggle>
 2a2:	08 95       	ret

000002a4 <main>:
#include "Aplication/APP.h"

//Starting the application and calling all the functions
int main(void)
{
App_init();
 2a4:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	while (1)
	{
		App_start();
 2a8:	0e 94 67 00 	call	0xce	; 0xce <App_start>
 2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <main+0x4>

000002ae <DIO_init>:
		break;
		case PORT_C:
		*value = pin_getting(PINA, PINnumber);
		break;
		case PORT_D:
		*value = pin_getting(PINA, PINnumber);
 2ae:	82 34       	cpi	r24, 0x42	; 66
 2b0:	31 f1       	breq	.+76     	; 0x2fe <DIO_init+0x50>
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <DIO_init+0xc>
 2b4:	81 34       	cpi	r24, 0x41	; 65
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <DIO_init+0x18>
 2b8:	08 95       	ret
 2ba:	83 34       	cpi	r24, 0x43	; 67
 2bc:	e1 f1       	breq	.+120    	; 0x336 <DIO_init+0x88>
 2be:	84 34       	cpi	r24, 0x44	; 68
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_init+0x16>
 2c2:	54 c0       	rjmp	.+168    	; 0x36c <DIO_init+0xbe>
 2c4:	08 95       	ret
 2c6:	41 11       	cpse	r20, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <DIO_init+0x34>
 2ca:	2a b3       	in	r18, 0x1a	; 26
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_init+0x28>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_init+0x24>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	8a bb       	out	0x1a, r24	; 26
 2e0:	08 95       	ret
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <DIO_init+0x3a>
 2e6:	5c c0       	rjmp	.+184    	; 0x3a0 <DIO_init+0xf2>
 2e8:	2a b3       	in	r18, 0x1a	; 26
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_init+0x46>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_init+0x42>
 2f8:	82 2b       	or	r24, r18
 2fa:	8a bb       	out	0x1a, r24	; 26
 2fc:	08 95       	ret
 2fe:	41 11       	cpse	r20, r1
 300:	0c c0       	rjmp	.+24     	; 0x31a <DIO_init+0x6c>
 302:	27 b3       	in	r18, 0x17	; 23
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_init+0x60>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_init+0x5c>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	87 bb       	out	0x17, r24	; 23
 318:	08 95       	ret
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	09 f0       	breq	.+2      	; 0x320 <DIO_init+0x72>
 31e:	40 c0       	rjmp	.+128    	; 0x3a0 <DIO_init+0xf2>
 320:	27 b3       	in	r18, 0x17	; 23
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_init+0x7e>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_init+0x7a>
 330:	82 2b       	or	r24, r18
 332:	87 bb       	out	0x17, r24	; 23
 334:	08 95       	ret
 336:	41 11       	cpse	r20, r1
 338:	0c c0       	rjmp	.+24     	; 0x352 <DIO_init+0xa4>
 33a:	24 b3       	in	r18, 0x14	; 20
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_init+0x98>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_init+0x94>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	84 bb       	out	0x14, r24	; 20
 350:	08 95       	ret
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	29 f5       	brne	.+74     	; 0x3a0 <DIO_init+0xf2>
 356:	24 b3       	in	r18, 0x14	; 20
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_init+0xb4>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_init+0xb0>
 366:	82 2b       	or	r24, r18
 368:	84 bb       	out	0x14, r24	; 20
 36a:	08 95       	ret
 36c:	41 11       	cpse	r20, r1
 36e:	0c c0       	rjmp	.+24     	; 0x388 <DIO_init+0xda>
 370:	21 b3       	in	r18, 0x11	; 17
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0xce>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0xca>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	81 bb       	out	0x11, r24	; 17
 386:	08 95       	ret
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	51 f4       	brne	.+20     	; 0x3a0 <DIO_init+0xf2>
 38c:	21 b3       	in	r18, 0x11	; 17
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_init+0xea>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_init+0xe6>
 39c:	82 2b       	or	r24, r18
 39e:	81 bb       	out	0x11, r24	; 17
 3a0:	08 95       	ret

000003a2 <DIO_write>:
 3a2:	82 34       	cpi	r24, 0x42	; 66
 3a4:	31 f1       	breq	.+76     	; 0x3f2 <DIO_write+0x50>
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <DIO_write+0xc>
 3a8:	81 34       	cpi	r24, 0x41	; 65
 3aa:	39 f0       	breq	.+14     	; 0x3ba <DIO_write+0x18>
 3ac:	08 95       	ret
 3ae:	83 34       	cpi	r24, 0x43	; 67
 3b0:	e1 f1       	breq	.+120    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3b2:	84 34       	cpi	r24, 0x44	; 68
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <DIO_write+0x16>
 3b6:	54 c0       	rjmp	.+168    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 3b8:	08 95       	ret
 3ba:	41 11       	cpse	r20, r1
 3bc:	0c c0       	rjmp	.+24     	; 0x3d6 <DIO_write+0x34>
 3be:	2b b3       	in	r18, 0x1b	; 27
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_write+0x28>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_write+0x24>
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	8b bb       	out	0x1b, r24	; 27
 3d4:	08 95       	ret
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <DIO_write+0x3a>
 3da:	5c c0       	rjmp	.+184    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 3dc:	2b b3       	in	r18, 0x1b	; 27
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_write+0x46>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_write+0x42>
 3ec:	82 2b       	or	r24, r18
 3ee:	8b bb       	out	0x1b, r24	; 27
 3f0:	08 95       	ret
 3f2:	41 11       	cpse	r20, r1
 3f4:	0c c0       	rjmp	.+24     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f6:	28 b3       	in	r18, 0x18	; 24
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_write+0x5c>
 406:	80 95       	com	r24
 408:	82 23       	and	r24, r18
 40a:	88 bb       	out	0x18, r24	; 24
 40c:	08 95       	ret
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	40 c0       	rjmp	.+128    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 414:	28 b3       	in	r18, 0x18	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	88 bb       	out	0x18, r24	; 24
 428:	08 95       	ret
 42a:	41 11       	cpse	r20, r1
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 42e:	25 b3       	in	r18, 0x15	; 21
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	85 bb       	out	0x15, r24	; 21
 444:	08 95       	ret
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	29 f5       	brne	.+74     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 44a:	25 b3       	in	r18, 0x15	; 21
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	85 bb       	out	0x15, r24	; 21
 45e:	08 95       	ret
 460:	41 11       	cpse	r20, r1
 462:	0c c0       	rjmp	.+24     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 464:	22 b3       	in	r18, 0x12	; 18
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	80 95       	com	r24
 476:	82 23       	and	r24, r18
 478:	82 bb       	out	0x12, r24	; 18
 47a:	08 95       	ret
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	51 f4       	brne	.+20     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 480:	22 b3       	in	r18, 0x12	; 18
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	82 2b       	or	r24, r18
 492:	82 bb       	out	0x12, r24	; 18
 494:	08 95       	ret

00000496 <DIO_toggle>:
	
}


void DIO_toggle(uint8_t portname, uint8_t PINnumber){
	switch(portname){
 496:	82 34       	cpi	r24, 0x42	; 66
 498:	a1 f0       	breq	.+40     	; 0x4c2 <DIO_toggle+0x2c>
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_toggle+0xc>
 49c:	81 34       	cpi	r24, 0x41	; 65
 49e:	31 f0       	breq	.+12     	; 0x4ac <DIO_toggle+0x16>
 4a0:	08 95       	ret
 4a2:	83 34       	cpi	r24, 0x43	; 67
 4a4:	c9 f0       	breq	.+50     	; 0x4d8 <DIO_toggle+0x42>
 4a6:	84 34       	cpi	r24, 0x44	; 68
 4a8:	11 f1       	breq	.+68     	; 0x4ee <DIO_toggle+0x58>
 4aa:	08 95       	ret
		case PORT_A:
		pin_toggle(PORTA, PINnumber);
 4ac:	2b b3       	in	r18, 0x1b	; 27
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_toggle+0x22>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_toggle+0x1e>
 4bc:	82 27       	eor	r24, r18
 4be:	8b bb       	out	0x1b, r24	; 27
		break;
 4c0:	08 95       	ret
		
		case PORT_B:
		pin_toggle(PORTB, PINnumber);
 4c2:	28 b3       	in	r18, 0x18	; 24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_toggle+0x38>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_toggle+0x34>
 4d2:	82 27       	eor	r24, r18
 4d4:	88 bb       	out	0x18, r24	; 24
		break;
 4d6:	08 95       	ret
		
		case PORT_C:
		pin_toggle(PORTC, PINnumber);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_toggle+0x4e>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_toggle+0x4a>
 4e8:	82 27       	eor	r24, r18
 4ea:	85 bb       	out	0x15, r24	; 21
		break;
 4ec:	08 95       	ret
		
		case PORT_D:
		pin_toggle(PORTD, PINnumber);
 4ee:	22 b3       	in	r18, 0x12	; 18
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_toggle+0x64>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_toggle+0x60>
 4fe:	82 27       	eor	r24, r18
 500:	82 bb       	out	0x12, r24	; 18
 502:	08 95       	ret

00000504 <INTERRUPT_global_init>:
 */ 
#include "interrupt.h"

void INTERRUPT_global_init(){
//activating the interrupt in the register's status
	pin_choose(SREG, 7);
 504:	8f b7       	in	r24, 0x3f	; 63
 506:	80 68       	ori	r24, 0x80	; 128
 508:	8f bf       	out	0x3f, r24	; 63
 50a:	08 95       	ret

0000050c <INTERRUPT_T0_ovf_init>:



void INTERRUPT_T0_ovf_init(){
	//turning on the t0_ovf interrupt
	pin_choose(TIMSK, 0);
 50c:	89 b7       	in	r24, 0x39	; 57
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	89 bf       	out	0x39, r24	; 57
 512:	08 95       	ret

00000514 <INTERRUPT_0_init>:
}



void INTERRUPT_0_init(){
	pin_choose(MCUCR, 0);
 514:	85 b7       	in	r24, 0x35	; 53
 516:	81 60       	ori	r24, 0x01	; 1
 518:	85 bf       	out	0x35, r24	; 53
	pin_choose(MCUCR, 1);
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	82 60       	ori	r24, 0x02	; 2
 51e:	85 bf       	out	0x35, r24	; 53
	pin_choose(GICR, 6);
 520:	8b b7       	in	r24, 0x3b	; 59
 522:	80 64       	ori	r24, 0x40	; 64
 524:	8b bf       	out	0x3b, r24	; 59
 526:	08 95       	ret

00000528 <setcallback>:

//Function pointer that saves the address of the function that was supplied to the callback function.
void static (*callbackvar)(uint8_t portname, uint8_t pinnum);
// Executes the address of the toggle function from the top layers in timer 0 overflow to cause the yellow lights to flicker.
void setcallback(void (*cbvar)(uint8_t portname, uint8_t pinnum)){
	callbackvar = cbvar;
 528:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <callbackvar+0x1>
 52c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <callbackvar>
 530:	08 95       	ret

00000532 <TIMER_0_set_init_value>:
	TIMER_0_set_init_value(init_value);
}

//assigning a starting value following a computation
void TIMER_0_set_init_value(uint8_t val){
	TCNT0 = val;
 532:	82 bf       	out	0x32, r24	; 50
 534:	08 95       	ret

00000536 <TIMER_0_init>:



//selecting normal mode
void TIMER_0_init(){
	TCCR0 |= ((0<<3) | (0<<6));
 536:	83 b7       	in	r24, 0x33	; 51
 538:	83 bf       	out	0x33, r24	; 51
	
	TIMER_0_set_init_value(init_value);
 53a:	8b e0       	ldi	r24, 0x0B	; 11
 53c:	0e 94 99 02 	call	0x532	; 0x532 <TIMER_0_set_init_value>
 540:	08 95       	ret

00000542 <TIMER_0_start>:
	TCNT0 = val;
}

	// Selecting the 1024 prescaler
void TIMER_0_start(){
	TCCR0 |= ((1<<0) | (1<<2));
 542:	83 b7       	in	r24, 0x33	; 51
 544:	85 60       	ori	r24, 0x05	; 5
 546:	83 bf       	out	0x33, r24	; 51
	
	// Waiting the overflow counter to reach 20
	while(ovf <20);
 548:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf>
 54c:	84 31       	cpi	r24, 0x14	; 20
 54e:	e0 f3       	brcs	.-8      	; 0x548 <TIMER_0_start+0x6>
}
 550:	08 95       	ret

00000552 <TIMER_0_stop>:


void TIMER_0_stop(){
	// Setting control register to 0 (no prescaler) to stop the timer
	TCCR0 = 0;
 552:	13 be       	out	0x33, r1	; 51
	
	// Resetting overflow counter
	ovf = 0;
 554:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf>
 558:	08 95       	ret

0000055a <TIMER_0_delay>:
}

// Delay function that perform the 5 seconds delay
void TIMER_0_delay(){
	TIMER_0_start();
 55a:	0e 94 a1 02 	call	0x542	; 0x542 <TIMER_0_start>
	TIMER_0_stop();
 55e:	0e 94 a9 02 	call	0x552	; 0x552 <TIMER_0_stop>
 562:	08 95       	ret

00000564 <TIMER_reset>:
}

// This function resets timer without stopping it
void TIMER_reset(){
	TIMER_0_set_init_value(init_value);
 564:	8b e0       	ldi	r24, 0x0B	; 11
 566:	0e 94 99 02 	call	0x532	; 0x532 <TIMER_0_set_init_value>
	ovf = 0;
 56a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf>
 56e:	08 95       	ret

00000570 <__vector_11>:
}

// Timer_0 overflow interrupt
ISR(TIMER_0_OVF){
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	2f 93       	push	r18
 57c:	3f 93       	push	r19
 57e:	4f 93       	push	r20
 580:	5f 93       	push	r21
 582:	6f 93       	push	r22
 584:	7f 93       	push	r23
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	af 93       	push	r26
 58c:	bf 93       	push	r27
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
	// Resetting initial value for the next timer cycle
	TIMER_0_set_init_value(init_value);
 592:	8b e0       	ldi	r24, 0x0B	; 11
 594:	0e 94 99 02 	call	0x532	; 0x532 <TIMER_0_set_init_value>
	
	// Incrementing overflow variable
	ovf++;
 598:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf>
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ovf>
	
	// Blinking yellow lights only in phase_2 and phase_4
	if(counting== level2 || counting == level4){
 5a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <counting>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	11 f0       	breq	.+4      	; 0x5ae <__vector_11+0x3e>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	e1 f4       	brne	.+56     	; 0x5e6 <__vector_11+0x76>
		// Only blink cars yellow light in normal mode
		if(!firstpress){
 5ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <firstpress>
 5b2:	81 11       	cpse	r24, r1
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__vector_11+0x56>
			callbackvar(traffic_lights, yellow_light);
 5b6:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <callbackvar>
 5ba:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <callbackvar+0x1>
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	09 95       	icall
 5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <__vector_11+0x76>
		}
		// Blink both yellow lights in pedestrian mode
		else if(firstpress){
 5c6:	88 23       	and	r24, r24
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__vector_11+0x76>
			callbackvar(traffic_lights, yellow_light);
 5ca:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <callbackvar>
 5ce:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <callbackvar+0x1>
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	09 95       	icall
			callbackvar(pedestrian_lights, yellow_light);
 5d8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <callbackvar>
 5dc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <callbackvar+0x1>
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	82 e4       	ldi	r24, 0x42	; 66
 5e4:	09 95       	icall
		}
	}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
